var tipuesearch = {"pages":[{"title":"About","text":"2017Fall 機械設計工程系 CADP & CP 課程倉儲: https://mde1a1.kmol.info/2017fall 課程投影片: https://mde1a1.kmol.info/2017fall/doc/trunk/index.html 課程網誌: https://mde1a1.kmol.info/2017fall/doc/trunk/blog/","tags":"misc","url":"https://40623130.github.io/fossil-warehouse/blog/pages/about/"},{"title":"2017 Fall CP 第十七至期末周","text":"準備期末報告及計算機程式! 我的倉儲. 我們的github","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w17-w18.html"},{"title":"2017 Fall CP 第十三至十六週","text":"etherclac 網路上的表單 pointer 協同開始~! 主要目的:打出一台計算機 協同期末報告及個人期末報告 if self. wait: self.display.clear() self.wait = false 上這是加減等待數字時的text處理,目的是等待時要是空白的 我的倉儲. 我們的github","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w13-w16.html"},{"title":"2017 Fall CP 第十二週","text":"進階處理 git log 看版本+更新次數等等 commit 後就是版本號 git chechout 版本碼 可以還原到上個版本或是更之前的版本 拉完後可以再回最新的版本 在eric6中有無小括號的差別:有的沒加的是因為已經有了 迴圈.number = [self.one.....] for i in number; i.clicked.connect(self.digitClicked) 上者是設置給有序的數字按鍵定義等等,為了可以不用打太多編碼 我的倉儲. 我們的github","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w12.html"},{"title":"2017 Fall CP 第十一週","text":"Github的相關指令與筆記 這周學了很多東西,但是並不會太難 可能只是初階的關係 之後還要協同阿...感覺就會出現一推的BUG了... 這東西就是GITHUB Branch 分支 = fossil doc 一樣 去setting改mater => gh-pages git branch 問分支 git add . 新增 git status =>跟fossil的指令很像 是檢查狀態 沒有身分會無法上傳 git confing --global user.email \"信箱\" git confing --global user.name \"學號\" git commit -m \"~~~~\" 以上都是處理近端,接下來要處理遠端 git push 推送-這打下去後通常都會跳出GITHUB的使用者登入介面-打隊就能修改和推送了 打完之後就會有個綁定的帳號在 控視台->使用者->認證 如果推好檔案可是自身近端與與協同的遠端有所不同,用 git pull 拉協同檔案 LaieX 很像word檔能拿來打報告 我的倉儲. 我的github","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w11.html"},{"title":"2017 Fall CP 第十週","text":"!第十周! 發現我使用的電腦每次凱基後螢幕放大 處理方法:對桌布按右鍵後選擇顯示設定 , 並選擇下方的進階設定 , 選擇1920*1280 這周了解程式對機械設計的重要以及筆記的正確用法與應用:不只是一直抄老師說的重點還要學著自己加入自己的想法與筆記(目前嘗試中) 這周主要學習如何幫計算機加入指令並實際應用還有 Gimp 與 dia portable 等繪畫軟體 以下是老師要我們抄起來的程式語言 # import sys from PyQt5 import QtWidgets from ui import Dialog app = QtWidgets.QAppliction(sys.argv) win = Dialog() win.show() sys.exit(app.exec()) 以及 # self.按鍵名.clicked.connect(self.digitClicked) def digitClicked(self): self.display.setText(self.sender().text()) 主要是要我們記住 定義 加指令 拉出 等等應用 我的倉儲.","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w10.html"},{"title":"2017 Fall CP 第九週-期中報告周","text":"期中報告周-期中是為了分數!! 期中報告周 報告在投影片當中 做得不夠好,看完同學的報告又聽完老師說的後,深深了解到自己的報告不是很好,太過於草率 了解到期中是為了得到分數並評量 ethercalc 唐鳳 perl 6 程式語言 gimp : 屏幕繪畫程式 協通的重要 : 內容 . 方法 . 流程 . 紀錄 . 在報告當中別示弱!!! 不要寫什麼不會用或是很爛之類的 而是將哪裡不懂得問同學或看影片並將[不會改到會的過程]打到報告中! 我的倉儲.","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w9.html"},{"title":"2017 Fall CP 第八週","text":"for迴圈與eric6 (一) for 迴圈 class w8(): def __init__(self, abc): self.abc = abc def duck(self, v): for i in range(1,v): print((v-i)*\" \"+i*self.abc) for i in range(v): print(i*\" \"+(v-i)*self.abc) w = w8(\"&#94;\") w.duck(5) (二)eric6新增專案及基本操作 利用黑盒子打開eric6 點中間上方的project選擇新建專案(new+) 選擇存檔位子及檔案名稱 之後點選python圖示右邊的forms 在下方空白處點右鍵選擇新增(new) 跳出視窗點OK 填入檔案名稱及選擇存檔位子 跳出拉表單的視窗 開始拉表單----完成後存檔並回到eric6 對檔案點右鍵選擇compile form 回到python圖示介面點選資料夾 出現剛剛拉表單的檔案 對他點F2→OK→出現→存檔完成 影片 2017-11-05_13-44-36 from a23654798 on Vimeo . 評分:75 我的倉儲.","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w8.html"},{"title":"計算機程式第七週學習心得","text":"W7學習心得 本學期計算機程式第一次期中測驗 , 利用cmd、SciTE、Leo學習如何編輯程式碼 時間過的很快 , 上課有沒有學習到呢?把握當下吧! 自我評分:80分 40623130-w7-exam from a23654798 on Vimeo . 我的倉儲 影片 Vimeo","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w7.html"},{"title":"2017 Fall CP 第六週","text":"W6心得與基本指令 心得:早起早睡上課才不會度估(台) 基本指令: 硬碟: = 更換硬碟工作位子 ex:C:\\Y:→→→Y:\\ cd = 更換目錄 cd / =回到碟目錄 move 1 2 = 移動/更改 (從1的資料夾移動到2的資料夾) mkdir = 建立資料夾 dir = 查詢當前目錄 modify 1 2 = 更換檔案(將1的資料更換成2的資料) rename 更名前 更名後 =檔案重新命名 cls = 清除螢幕 merge = 合併 fossil clone =克隆(複製) fossil ui = 連線於近端的fossil檔 fossil open ./../ = 打開 fossil add . = 加入準備上傳的檔案 (全部) fossil add 檔名= 只加入這個\"檔名\"的檔案 fossil commit -m \" \" = 提交檔案 \"名\" fossil status = 目前狀態 fossil delete = 刪除 fossil push = 手動推送 fossil pull = 拉檔案 fossil version = 目前版本 fossil update = 更新(遠端更新進端)","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w6.html"},{"title":"2017 Fall CP 第五週","text":"W5 PyQt5 #!/usr/bin/env python import math from PyQt5.QtCore import Qt from PyQt5.QtWidgets import (QApplication, QGridLayout, QLayout, QLineEdit, QSizePolicy, QToolButton, QWidget) class Button(QToolButton): ''' def __init__(self, text, parent=None): super(Button, self).__init__(parent) ''' # for Python 3 def __init__(self, text): super().__init__() self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred) self.setText(text) def sizeHint(self): size = super(Button, self).sizeHint() size.setHeight(size.height() + 20) size.setWidth(max(size.width(), size.height())) return size class Calculator(QWidget): NumDigitButtons = 10 ''' def __init__(self, parent=None): super(Calculator, self).__init__(parent) ''' def __init__(self): super().__init__() self.pendingAdditiveOperator = '' self.pendingMultiplicativeOperator = '' self.sumInMemory = 0.0 self.sumSoFar = 0.0 self.factorSoFar = 0.0 self.waitingForOperand = True self.display = QLineEdit('0') self.display.setReadOnly(True) self.display.setAlignment(Qt.AlignRight) self.display.setMaxLength(15) font = self.display.font() font.setPointSize(font.pointSize() + 8) self.display.setFont(font) self.digitButtons = [] for i in range(Calculator.NumDigitButtons): self.digitButtons.append(self.createButton(str(i), self.digitClicked)) self.pointButton = self.createButton(\".\", self.pointClicked) self.changeSignButton = self.createButton(u\"\\N{PLUS-MINUS SIGN}\", self.changeSignClicked) self.backspaceButton = self.createButton(\"Backspace\", self.backspaceClicked) self.clearButton = self.createButton(\"Clear\", self.clear) self.clearAllButton = self.createButton(\"Clear All\", self.clearAll) self.clearMemoryButton = self.createButton(\"MC\", self.clearMemory) self.readMemoryButton = self.createButton(\"MR\", self.readMemory) self.setMemoryButton = self.createButton(\"MS\", self.setMemory) self.addToMemoryButton = self.createButton(\"M+\", self.addToMemory) self.divisionButton = self.createButton(u\"\\N{DIVISION SIGN}\", self.multiplicativeOperatorClicked) self.timesButton = self.createButton(u\"\\N{MULTIPLICATION SIGN}\", self.multiplicativeOperatorClicked) self.minusButton = self.createButton(\"-\", self.additiveOperatorClicked) self.plusButton = self.createButton(\"+\", self.additiveOperatorClicked) self.squareRootButton = self.createButton(\"Sqrt\", self.unaryOperatorClicked) self.powerButton = self.createButton(u\"x\\N{SUPERSCRIPT TWO}\", self.unaryOperatorClicked) self.reciprocalButton = self.createButton(\"1/x\", self.unaryOperatorClicked) self.equalButton = self.createButton(\"=\", self.equalClicked) mainLayout = QGridLayout() mainLayout.setSizeConstraint(QLayout.SetFixedSize) mainLayout.addWidget(self.display, 0, 0, 1, 6) mainLayout.addWidget(self.backspaceButton, 1, 0, 1, 2) mainLayout.addWidget(self.clearButton, 1, 2, 1, 2) mainLayout.addWidget(self.clearAllButton, 1, 4, 1, 2) mainLayout.addWidget(self.clearMemoryButton, 2, 0) mainLayout.addWidget(self.readMemoryButton, 3, 0) mainLayout.addWidget(self.setMemoryButton, 4, 0) mainLayout.addWidget(self.addToMemoryButton, 5, 0) for i in range(1, Calculator.NumDigitButtons): row = ((9 - i) / 3) + 2 column = ((i - 1) % 3) + 1 mainLayout.addWidget(self.digitButtons[i], row, column) mainLayout.addWidget(self.digitButtons[0], 5, 1) mainLayout.addWidget(self.pointButton, 5, 2) mainLayout.addWidget(self.changeSignButton, 5, 3) mainLayout.addWidget(self.divisionButton, 2, 4) mainLayout.addWidget(self.timesButton, 3, 4) mainLayout.addWidget(self.minusButton, 4, 4) mainLayout.addWidget(self.plusButton, 5, 4) mainLayout.addWidget(self.squareRootButton, 2, 5) mainLayout.addWidget(self.powerButton, 3, 5) mainLayout.addWidget(self.reciprocalButton, 4, 5) mainLayout.addWidget(self.equalButton, 5, 5) self.setLayout(mainLayout) self.setWindowTitle(\"Calculator\") def digitClicked(self): clickedButton = self.sender() digitValue = int(clickedButton.text()) if self.display.text() == '0' and digitValue == 0.0: return if self.waitingForOperand: self.display.clear() self.waitingForOperand = False self.display.setText(self.display.text() + str(digitValue)) def unaryOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if clickedOperator == \"Sqrt\": if operand < 0.0: self.abortOperation() return result = math.sqrt(operand) elif clickedOperator == u\"x\\N{SUPERSCRIPT TWO}\": result = math.pow(operand, 2.0) elif clickedOperator == \"1/x\": if operand == 0.0: self.abortOperation() return result = 1.0 / operand self.display.setText(str(result)) self.waitingForOperand = True def additiveOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return self.display.setText(str(self.factorSoFar)) operand = self.factorSoFar self.factorSoFar = 0.0 self.pendingMultiplicativeOperator = '' if self.pendingAdditiveOperator: if not self.calculate(operand, self.pendingAdditiveOperator): self.abortOperation() return self.display.setText(str(self.sumSoFar)) else: self.sumSoFar = operand self.pendingAdditiveOperator = clickedOperator self.waitingForOperand = True def multiplicativeOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return self.display.setText(str(self.factorSoFar)) else: self.factorSoFar = operand self.pendingMultiplicativeOperator = clickedOperator self.waitingForOperand = True def equalClicked(self): operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return operand = self.factorSoFar self.factorSoFar = 0.0 self.pendingMultiplicativeOperator = '' if self.pendingAdditiveOperator: if not self.calculate(operand, self.pendingAdditiveOperator): self.abortOperation() return self.pendingAdditiveOperator = '' else: self.sumSoFar = operand self.display.setText(str(self.sumSoFar)) self.sumSoFar = 0.0 self.waitingForOperand = True def pointClicked(self): if self.waitingForOperand: self.display.setText('0') if \".\" not in self.display.text(): self.display.setText(self.display.text() + \".\") self.waitingForOperand = False def changeSignClicked(self): text = self.display.text() value = float(text) if value > 0.0: text = \"-\" + text elif value < 0.0: text = text[1:] self.display.setText(text) def backspaceClicked(self): if self.waitingForOperand: return text = self.display.text()[:-1] if not text: text = '0' self.waitingForOperand = True self.display.setText(text) def clear(self): if self.waitingForOperand: return self.display.setText('0') self.waitingForOperand = True def clearAll(self): self.sumSoFar = 0.0 self.factorSoFar = 0.0 self.pendingAdditiveOperator = '' self.pendingMultiplicativeOperator = '' self.display.setText('0') self.waitingForOperand = True def clearMemory(self): self.sumInMemory = 0.0 def readMemory(self): self.display.setText(str(self.sumInMemory)) self.waitingForOperand = True def setMemory(self): self.equalClicked() self.sumInMemory = float(self.display.text()) def addToMemory(self): self.equalClicked() self.sumInMemory += float(self.display.text()) def createButton(self, text, member): button = Button(text) button.clicked.connect(member) return button def abortOperation(self): self.clearAll() self.display.setText(\"####\") def calculate(self, rightOperand, pendingOperator): if pendingOperator == \"+\": self.sumSoFar += rightOperand elif pendingOperator == \"-\": self.sumSoFar -= rightOperand elif pendingOperator == u\"\\N{MULTIPLICATION SIGN}\": self.factorSoFar *= rightOperand elif pendingOperator == u\"\\N{DIVISION SIGN}\": if rightOperand == 0.0: return False self.factorSoFar /= rightOperand return True if __name__ == '__main__': import sys app = QApplication(sys.argv) calc = Calculator() calc.show() sys.exit(app.exec_())","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w5.html"},{"title":"如何添加文章+測試(W3-4)","text":"測試上傳以及添加的文章是否可行 1.利用SciTE程式打開launchLeo.py ex:左上file→open...→位於Y槽最下方的launchLeo.py 雙擊→按F5執行指令 2.打開已編輯過的leo檔((自己學號的那個 ex:左上File→Open→Y:→tmp→fossil→wd→users→{自己學號}.leo 雙擊 3.新增文章 ex:於@path content按CTRL+I→產生新檔→名稱:\"@edit 日期(yyyymmdd).md\"(((簡單版本www))) 4.編寫摘要與內容 ex: \" @ language md →打就對了 Title: 標題 Date: 日期 →yyyy-mmm-dd hh:tt Category: Course →網站上方的選項:目前還不會... Tags: 標籤 →善用Tags能更有效地找的要找的文章 Slug: 2017-fall-cp-w4 →每個Slug都必須要是獨一無二的存在,也就是說不能有同名的Slug Author: 學號 -------摘要------- < !-- PELICAN_END_SUMMARY --> (↑請將上方空格刪除) →刪除空格後指令成酒紅色:擁有備註的功能(限於leo編輯程式內) -------內容------- < a href=\"網址\">想要此網址變成的名稱 小於+/a大於 (↑請將上方空格刪除)→刪除後成藍色指令:頭 (↑請將上方國字轉換成符號)→轉換後藍色指令:尾\" 5.近端測試→遠端上傳→用黑盒子cmd推送至倉儲→完成 \"(記得儲存)\" 題外指令(屬於黑盒子的指令): 設定預設主控台的前景與背景色彩。 COLOR [attr] attr 指定主控台輸出的色彩屬性 色彩屬性由兩個十六進位數字所指定 -- 第一個對應到背景，第二個對應到前景。 每一個位數可為以下其中一個值: 0 = 黑色 8 = 灰色 1 = 藍色 9 = 淡藍色 2 = 綠色 A = 淡綠色 3 = 藍綠色 B = 但藍綠色 4 = 紅色 C = 淡紅色 5 = 紫色 D = 淡紫色 6 = 黃色 E = 淡黃色 7 = 白色 F = 亮白色 若未指定引數，此命令會還原成 CMD.EXE 啟動時的色彩。此值可能來自目前 主控台視窗、/T 命令列切換參數或來自 DefaultColor 登錄值。 若嘗試執行 COLOR 命令並將前景與背景色彩設定為相同色彩，則 COLOR 命令 會將 ERRORLEVEL 設定為 1。 範例: \"COLOR fc\" 會在亮白色背景上產生淡紅色 我的倉儲","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w4.html"},{"title":"2017 Fall CP 第二週","text":"本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區. +%Z%ED超棒der 測試沒有綁定帳號後, 指定帳號新增提交推送版本. 測試 commit 時沒有 --user-override 4062 測試 push 才綁帳號 configuration - 組成內容與狀態 scm - software configuration management batch - 批次 remark - 註解 default - 內定, 默認 fossil clone - 克隆 fossil add - 新增 fossil commit - 提交 fossil push - 推送 fossil remote-url off fossil ui - user interface url - uniform resource locator https - secure hypertext transfer protocol protocol - 協定 certification - 簽章 - public key server certify - 認證 vacuum - 吸塵 fossil clone https://mde1a1.kmol.info/pymcadp pymcadp.fossil IDE - Integrated Development Environment 希望為每位學員建立倉儲的設想流程如下: 各學員可以獨立維護倉儲內容, 也可以在總管理員的權限下, 為分組學員建立帳號, 逐步導入協同設計 各學員的倉儲以修課班級命名伺服器, 以學號命名倉儲, 方便依照此一規律擷取各學員的倉儲頁面. 各學員能以電子郵件收到與新建倉儲相關的連結, 以及帳號密碼. 必須擴增 Ubuntu ulimits -n 同時開檔的設限範圍 (內定只允許同時開啟 1024 個檔案) 解決方案: 主機名稱可以透過 domain dns 中的 CNAME 別名方式處理, 因為目前所能提供出來的 IPv4/IPv6 雙支援主機, 之前已經都設定了符號名稱. fossil init 雖然提供指定管理者的 -A 選項功能, 但是無法直接指定管理者對應密碼, 因此必須建立倉儲之後, 再利用 fossil user 修改密碼, 之後再利用 Gmail 寄出通知信, 其中提供倉儲連結, 登入帳號與密碼等資訊. 建立各學員倉儲檔案的程式如下, 如前所述, 主要透過兩個 Fossil SCM 指令完成, 在 Windows 採用 Fossil SCM 2.3 版建立所有 .fossil 倉儲時, 將同時以 email 通知各學員. 各學員的 .fossil 檔案再以 sftp 送到伺服主機對應帳號所屬的目錄下. 必須要特別注意的是, 採用 Fossil SCM 2.3 版所建立的 .fossil 倉儲檔案, 在 Ubuntu 操作系統上也必須採用相同版本的 fossil, 否則舊版 fossil 可能無法開啟新版 fossil 程式所建立的倉儲檔. import os import string import random # 使用 Gmail 寄信必須導入下列模組 import smtplib import re from email.mime.text import MIMEText from email.header import Header # 用來以亂數建立密碼的韓式 def id_generator(size=6, chars=string.ascii_uppercase + string.digits): ''' source: https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python ''' return ''.join(random.choice(chars) for _ in range(size)) # 讀取學員名單, 逐一取得學員學號, 學員名單, 檢查點 1/7 student_data = open(\"2017fall_list/1b.txt\").read() student_list = student_data.splitlines() # 利用 gmail smtp 功能寄信 server = smtplib.SMTP('smtp.gmail.com:587') server.ehlo() server.starttls() # 以下必須準備好對應郵件帳號與密碼的外部檔案, 所提供的寄信帳號, 是否可以寄信, 檢查點 2/7 ''' 寄信之前必須到 https://www.google.com/settings/security/lesssecureapps 修改權限, 改為較低安全權限 否則無法使用程式寄信! ''' # 從外部檔案讀取要用來寄信的 gmail 帳號與密碼 # mail.txt 格式為: 電子郵箱,對應密碼, 以逗點隔開, 檢查點 3/7 email_data = open(\"z:/2017fall/mail.txt\").read() email, email_password= email_data.split(\",\") print(email, email_password) # 是否登入所提供寄信的電子郵箱, 4/7 server.login(email, email_password) # 不同課程名稱, 與對應主機名稱, 必須配合修改 5/7 course_title = \"計算機程式\" fossil_server = \"cpb.kmol.info\" for student_num in student_list: username = student_num repository = username + '.fossil' # 利用所提供的字串, 以亂數組成六個字元的密碼 password = id_generator(6, \"23456789abcdef\") print(student_num, \", \" , password) # 執行 dos command 指令, 建立倉儲 os.system(\"fossil init -A \" +username + \" \" + repository) print(\"已經建立倉儲 \" + repository) # 執行 dos command 指令, 修改使用者密碼 os.system(\"fossil user password \" + username + \" \" + password + \" -R \" + repository) print(\"已經修改密碼\") # 利用 Gmail 寄信, 告知各學員倉儲連結與帳號密碼 # 每一位學員收到的 output 都從這裡 reset output = \"\" # 若學號欄為空, 則不寄信 if student_num != \"\": # output 為寄給每一位學員的資料表格 mail_content = student_num+' 您好: 您在 '+course_title+' 課程中的區域網路倉儲: https://'+fossil_server+'/'+student_num+' ' mail_content += '管理帳號為:'+ student_num + ' 管理密碼為: '+ password+' ' print(student_num) print(mail_content) # 至此 mail_content 已經確定 # 在測試與實際寄送資料, 也必須配合修改, 檢查點 6/7 receiver_email = student_num + \"@gm.nfu.edu.tw\" # 測試用 #receiver_email = student_num+\"@mde.tw\" # 列出收信人 email 位址 #print(receiver_email) #message= MIMEText(mail_content,'plain','UTF-8') # 以 html 格式寄信 message= MIMEText(mail_content,'html','UTF-8') message['Subject'] = Header(course_title+\" Fossil SCM 帳號通知\", 'UTF-8') # 可以先不寄信, 確定格式正確後再開啟, 是否實際寄出信件, 檢查點 7/7 server.sendmail(\"gmail_address\", receiver_email, message.as_string()) server.quit() 各班所完成的主機: 二甲電腦輔助設計實習: https://cadpa.kmol.info 二乙電腦輔助設計實習: https://cadpb.kmol.info 一甲計算機程式: https://cpa.kmol.info 一乙計算機程式: https://cpb.kmol.info","tags":"Course","url":"https://40623130.github.io/fossil-warehouse/blog/2017-fall-cp-w2-1.html"}]};